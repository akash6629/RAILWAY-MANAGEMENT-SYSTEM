#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <ctime>

using namespace std;

// Class to hold train data
class Train {
public:
    string serial_number;
    string train_number;
    string train_name;
    string start;
    string destination;
    string price;
    int seats;
    string time;
};

// Class to hold booking data
class Booking {
public:
    string train_number;
    string passenger_name;
    string phone_number;
    string date;
    int seat;
};

// Railway Management System Class
class RailwayManagementSystem {
private:
    vector<Train> trains;
    vector<Booking> bookings;

    void loadTrainData() {
        ifstream infile("train_details.txt");
        if (!infile) {
            cout << "Unable to open train details file." << endl;
            return;
        }
        Train train;
        while (infile >> train.serial_number >> train.train_number >> train.train_name 
               >> train.start >> train.destination >> train.price >> train.seats >> train.time) {
            trains.push_back(train);
        }
        infile.close();
    }

    void loadBookingData() {
        ifstream infile("booklist.txt");
        if (!infile) {
            cout << "Unable to open booking file." << endl;
            return;
        }
        Booking booking;
        while (infile >> booking.train_number >> booking.passenger_name >> booking.phone_number 
               >> booking.date >> booking.seat) {
            bookings.push_back(booking);
        }
        infile.close();
    }

    void saveTrainData() {
        ofstream outfile("train_details.txt");
        for (size_t i = 0; i < trains.size(); ++i) {
            outfile << trains[i].serial_number << " " << trains[i].train_number << " " 
                    << trains[i].train_name << " " << trains[i].start << " " 
                    << trains[i].destination << " " << trains[i].price << " " 
                    << trains[i].seats << " " << trains[i].time << endl;
        }
        outfile.close();
    }

    void saveBookingData() {
        ofstream outfile("booklist.txt");
        for (size_t i = 0; i < bookings.size(); ++i) {
            outfile << bookings[i].train_number << " " << bookings[i].passenger_name << " " 
                    << bookings[i].phone_number << " " << bookings[i].date << " " 
                    << bookings[i].seat << endl;
        }
        outfile.close();
    }

public:
    RailwayManagementSystem() {
        loadTrainData();
        loadBookingData();
    }

    void viewInfo() {
        cout << "\n\t\t\t=================================\n";
        cout << "\t\t\t=   RAILWAY MANAGEMENT SYSTEM   =\n";
        cout << "\t\t\t=================================\n";
        cout << "\n\n    SI\tTrain Number\tTrain Name\tStart Place\tDestination Place\tPrice\tSeats\tTime\n\n";
        for (size_t i = 0; i < trains.size(); ++i) {
            cout << "    " << trains[i].serial_number << "\t" << trains[i].train_number << "\t\t" 
                 << trains[i].train_name << "\t\t" << trains[i].start << "\t\t" 
                 << trains[i].destination << "\t\t" << trains[i].price << "\t" 
                 << trains[i].seats << "\t" << trains[i].time << endl;
        }
        cout << "    ***********************************************************************************************\n";
    }

    void bookTicket() {
        int num_tickets;
        cout << "\n\n\t\t\thow many tickets do you want to buy: ";
        cin >> num_tickets;
        
        for (int j = 0; j < num_tickets; j++) {
            Booking booking;
            cout << "\n\n\t\t\tEnter train number: ";
            cin >> booking.train_number;

            bool found = false;
            for (size_t i = 0; i < trains.size(); ++i) {
                if (trains[i].train_number == booking.train_number) {
                    found = true;
                    if (trains[i].seats == 0) {
                        cout << "\n\n\t\t\tNo available seats";
                        return;
                    }
                    cout << "\n\t\t\tEnter date: ";
                    cin >> booking.date;
                    cout << "\n\t\t\tEnter your name: ";
                    cin >> booking.passenger_name;
                    cout << "\n\t\t\tEnter your phone number: ";
                    cin >> booking.phone_number;
                    booking.seat = trains[i].seats; // Assign seat number
                    bookings.push_back(booking);
                    trains[i].seats--; // Decrease available seats
                    saveTrainData(); // Save updated train data
                    break;
                }
            }
            if (!found) {
                cout << "\n\n\t\t\tTrain not found!!!";
            }
        }
        saveBookingData(); // Save booking data
        cout << "\n\n\t\t\tTickets booked successfully!";
    }

    void cancelTicket() {
        string phone_number;
        cout << "\n\n\t\t\tEnter phone number: ";
        cin >> phone_number;

        bool bookingFound = false;
        for (size_t i = 0; i < bookings.size(); ++i) {
            if (bookings[i].phone_number == phone_number) {
                bookingFound = true;
                
                // Restore the seat to the train's available seats
                for (size_t j = 0; j < trains.size(); ++j) {
                    if (trains[j].train_number == bookings[i].train_number) {
                        trains[j].seats++; // Increment available seats
                        break;
                    }
                }
                
                bookings.erase(bookings.begin() + i);
                cout << "\n\n\t\t\tTicket cancelled successfully";
                saveBookingData(); // Save updated booking data
                saveTrainData();   // Save updated train data
                break;
            }
        }

        if (!bookingFound) {
            cout << "\n\n\t\t\tData Not Found";
        }
    }

    void admin() {
        int choice;
        cout << "\n\n\t\t\t=================================\n";
        cout << "\t\t\t=   RAILWAY MANAGEMENT SYSTEM   =\n";
        cout << "\t\t\t=================================\n";
        cout << "\n\n\t\t\t[1] VIEW PASSENGERS\n";
        cout << "\t\t\t[2] ADD TRAIN\n";
        cout << "\t\t\t[3] DELETE TRAIN\n";
        cout << "\t\t\t[4] BACK\n";
        cout << "\n\t\t\tENTER YOUR CHOICE: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "\n\n\t\t\tPassenger List:\n";
                for (size_t i = 0; i < bookings.size(); ++i) {
                    cout << "Train Number: " << bookings[i].train_number << ", Name: " 
                         << bookings[i].passenger_name << ", Phone: " << bookings[i].phone_number 
                         << ", Date: " << bookings[i].date << ", Seat: " << bookings[i].seat << endl;
                }
                break;
            case 2: {
                Train newTrain;
                cout << "\nEnter train serial number: ";
                cin >> newTrain.serial_number;
                cout << "Enter train number: ";
                cin >> newTrain.train_number;
                cout << "Enter train name: ";
                cin >> newTrain.train_name;
                cout << "Enter start place: ";
                cin >> newTrain.start;
                cout << "Enter destination place: ";
                cin >> newTrain.destination;
                cout << "Enter price: ";
                cin >> newTrain.price;
                cout << "Enter number of seats: ";
                cin >> newTrain.seats;
                cout << "Enter time: ";
                cin >> newTrain.time;

                trains.push_back(newTrain);
                saveTrainData();
                cout << "\nTrain added successfully!";
                break;
            }
            case 3: {
                string trainNumber;
                cout << "\nEnter train number to delete: ";
                cin >> trainNumber;
                bool trainFound = false;
                for (size_t i = 0; i < trains.size(); ++i) {
                    if (trains[i].train_number == trainNumber) {
                        trains.erase(trains.begin() + i);
                        trainFound = true;
                        saveTrainData();
                        cout << "\nTrain deleted successfully!";
                        break;
                    }
                }
                if (!trainFound) {
                    cout << "\nTrain not found!";
                }
                break;
            }
            case 4:
                return;
            default:
                cout << "\n\t\t\tyou entered wrong KEY!!!!";
        }
    }
};

// Main Function
int main() {
    RailwayManagementSystem rms;
    int choice;

    while (true) {
        time_t now = time(0);
        cout << "\n\t\t\t     " << ctime(&now) << endl;
        cout << "\n\t\t\t=================================\n";
        cout << "\t\t\t=   RAILWAY MANAGEMENT SYSTEM   =\n";
        cout << "\t\t\t=================================\n\n\n";
        cout << "\n\t\t\t[1] VIEW INFORMATION\n";
        cout << "\n\t\t\t[2] BOOK TICKET\n";
        cout << "\n\t\t\t[3] CANCEL TICKET\n";
        cout << "\n\t\t\t[4] ADMIN\n";
        cout << "\n\t\t\t[5] EXIT\n";
        cout << "\n\t\t\tENTER YOUR CHOICE: ";
        cin >> choice;

        switch (choice) {
            case 1:
                rms.viewInfo();
                break;
            case 2:
                rms.bookTicket();
                break;
            case 3:
                rms.cancelTicket();
                break;
            case 4:
                rms.admin();
                break;
            case 5:
                cout << "\n\t\t\tThank you for using the Railway Management System!";
                return 0;
            default:
                cout << "\n\t\t\tyou entered wrong KEY!!!!";
        }
    }
}
